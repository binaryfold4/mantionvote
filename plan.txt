* SC API Scraper
 - python based scraper that perodically grabs SC data
 - should be extended to grab extra data (i.e. stream URL to integrate player)
 - should store into intermediate DB and have some logic in case SC data
   becomes unavailable (on a per track or account basis)
 - long term should be integrated into Django app, configurable via Django
   admin
  

* Frontend
 - loads in 3 json files (generated by server)
   reduce app/SQL load)
    - all tracks (static JSON created by scraper)
    - top 20 tracks
    - own voted 20 tracks
    
 - user can select in main track list what to vote for
 - background colour of track will change color
 - list on side of page updates showing (X of X tracks) and then a "Submit Vote" button
    
* Backend
 - django login to vote (integrate with external auth against soundcloud -
   django-social-auth)
 - endpoints for json files (2x generated from db)
 - allow vote
    - checks for 20 tracks, records in table
    
* db structure

user 
 - normal django stuff w/ required extensions for social

tracks
- matches json file as-is (scraped from sc)

votes
- id
- track_id
- user_id
- date (auto date)
- current

currvote
- track_id
- total_vote
- last_updated

when posting a vote
 * is user logged in
 * are there 20 tracks
 * update votes set current=0 where user_id=self
 * for each track/vote:
   - add to votes set current=0, etc etc (for all 20)
   - update corrvote: count() votes where track=trackid, current=1

